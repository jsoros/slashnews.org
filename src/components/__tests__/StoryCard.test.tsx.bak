import { describe, it, expect, vi, beforeEach } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import { StoryCard } from '../StoryCard';
import type { HackerNewsItem } from '../../services/hackerNewsApi';

const mockOnToggleComments = vi.fn();
const mockOnHideArticle = vi.fn();
const mockOnShowArticle = vi.fn();

// Default props for testing
const defaultProps = {
  onToggleComments: mockOnToggleComments,
  onHideArticle: mockOnHideArticle,
  onShowArticle: mockOnShowArticle,
  isHidden: false,
  showingHidden: false,
};

// Mock DOMPurify
vi.mock('dompurify', () => ({
  default: {
    sanitize: vi.fn((html: string) => html),
  },
}));

// Mock date-fns
vi.mock('date-fns', () => ({
  formatDistanceToNow: vi.fn(() => '2 hours ago'),
}));

// Mock Comments component since we're testing StoryCard in isolation
vi.mock('../Comments', () => ({
  Comments: ({ storyId }: { storyId: number }) => (
    <div data-testid="comments-component">Comments for story {storyId}</div>
  ),
}));

describe('StoryCard Component', () => {
  const mockStory: HackerNewsItem = {
    id: 123,
    type: 'story',
    by: 'testuser',
    time: 1640995200,
    title: 'Test Story Title',
    url: 'https://example.com/test-article',
    score: 100,
    descendants: 25,
    text: undefined,
    kids: [124, 125],
  };

  const mockOnToggleComments = vi.fn();

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('Title View Mode', () => {
    it('renders only title for title view mode', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="title"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('Test Story Title')).toBeInTheDocument();
      expect(screen.queryByText('testuser')).not.toBeInTheDocument();
      expect(screen.queryByText('100 points')).not.toBeInTheDocument();
      expect(screen.queryByText('25 comments')).not.toBeInTheDocument();
    });

    it('renders title as link when story has URL', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="title"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      const titleLink = screen.getByRole('link', { name: 'Test Story Title' });
      expect(titleLink).toHaveAttribute('href', 'https://example.com/test-article');
      expect(titleLink).toHaveAttribute('target', '_blank');
      expect(titleLink).toHaveAttribute('rel', 'noopener noreferrer');
    });

    it('renders title as span when story has no URL', () => {
      const storyWithoutUrl = { ...mockStory, url: undefined };
      render(
        <StoryCard
          story={storyWithoutUrl}
          viewMode="title"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('Test Story Title')).toBeInTheDocument();
      expect(screen.queryByRole('link', { name: 'Test Story Title' })).not.toBeInTheDocument();
    });

    it('applies correct CSS classes for title view', () => {
      const { container } = render(
        <StoryCard
          story={mockStory}
          viewMode="title"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(container.firstChild).toHaveClass('story-wrapper', 'view-title');
      expect(screen.getByText('Test Story Title').closest('.title-view')).toBeInTheDocument();
    });
  });

  describe('Compact View Mode', () => {
    it('renders title and metadata in compact view', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="compact"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('Test Story Title')).toBeInTheDocument();
      expect(screen.getByText('testuser')).toBeInTheDocument();
      expect(screen.getByText('2 hours ago')).toBeInTheDocument();
      expect(screen.getByText('100 pts')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: '25 comments' })).toBeInTheDocument();
    });

    it('handles comments button click in compact view', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="compact"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      const commentsButton = screen.getByRole('button', { name: '25 comments' });
      fireEvent.click(commentsButton);

      expect(mockOnToggleComments).toHaveBeenCalledWith(123);
    });

    it('does not render score when not available', () => {
      const storyWithoutScore = { ...mockStory, score: undefined };
      render(
        <StoryCard
          story={storyWithoutScore}
          viewMode="compact"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.queryByText(/pts/)).not.toBeInTheDocument();
    });

    it('does not render comments button when no descendants', () => {
      const storyWithoutComments = { ...mockStory, descendants: undefined };
      render(
        <StoryCard
          story={storyWithoutComments}
          viewMode="compact"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.queryByRole('button', { name: /comments/ })).not.toBeInTheDocument();
    });

    it('shows summary loading state in compact view', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="compact"
          expandedStory={null}
          loadingSummary={true}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('Loading summary...')).toBeInTheDocument();
    });

    it('shows summary when provided in compact view', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="compact"
          expandedStory={null}
          summary="This is a test article summary"
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('This is a test article summary')).toBeInTheDocument();
    });

    it('shows summary failed state in compact view', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="compact"
          expandedStory={null}
          summaryFailed={true}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('Summary unavailable')).toBeInTheDocument();
    });

    it('does not show summary for stories with text content', () => {
      const storyWithText = { ...mockStory, text: 'Story has text content' };
      render(
        <StoryCard
          story={storyWithText}
          viewMode="compact"
          expandedStory={null}
          summary="This summary should not show"
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.queryByText('This summary should not show')).not.toBeInTheDocument();
    });

    it('renders expanded comments in compact view', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="compact"
          expandedStory={123}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByTestId('comments-component')).toBeInTheDocument();
      expect(screen.getByText('Comments for story 123')).toBeInTheDocument();
    });

    it('does not render comments when story is not expanded', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="compact"
          expandedStory={456}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.queryByTestId('comments-component')).not.toBeInTheDocument();
    });
  });

  describe('Full View Mode', () => {
    it('renders complete story card in full view', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText(/🌐 Test Story Title/)).toBeInTheDocument();
      expect(screen.getByText('testuser')).toBeInTheDocument();
      expect(screen.getByText('2 hours ago')).toBeInTheDocument();
      expect(screen.getByText('100 points')).toBeInTheDocument();
      expect(screen.getByRole('button', { name: '25 comments' })).toBeInTheDocument();
      expect(screen.getByRole('link', { name: 'View Article' })).toBeInTheDocument();
      expect(screen.getByRole('link', { name: 'View on HN' })).toBeInTheDocument();
    });

    it('displays story icon in title', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText(/🌐 Test Story Title/)).toBeInTheDocument();
    });

    it('shows correct icon for GitHub URLs', () => {
      const githubStory = { ...mockStory, url: 'https://github.com/user/repo' };
      render(
        <StoryCard
          story={githubStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText(/👨‍💻 Test Story Title/)).toBeInTheDocument();
    });

    it('shows correct icon for YouTube URLs', () => {
      const youtubeStory = { ...mockStory, url: 'https://youtube.com/watch?v=123' };
      render(
        <StoryCard
          story={youtubeStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText(/📺 Test Story Title/)).toBeInTheDocument();
    });

    it('shows correct icon for Twitter/X URLs', () => {
      const twitterStory = { ...mockStory, url: 'https://twitter.com/user/status/123' };
      render(
        <StoryCard
          story={twitterStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText(/🐦 Test Story Title/)).toBeInTheDocument();
    });

    it('shows correct icon for Medium URLs', () => {
      const mediumStory = { ...mockStory, url: 'https://medium.com/@user/article' };
      render(
        <StoryCard
          story={mediumStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText(/📝 Test Story Title/)).toBeInTheDocument();
    });

    it('shows correct icon for ArXiv URLs', () => {
      const arxivStory = { ...mockStory, url: 'https://arxiv.org/abs/2101.00001' };
      render(
        <StoryCard
          story={arxivStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText(/🔬 Test Story Title/)).toBeInTheDocument();
    });

    it('shows correct icon for Wikipedia URLs', () => {
      const wikipediaStory = { ...mockStory, url: 'https://wikipedia.org/wiki/Article' };
      render(
        <StoryCard
          story={wikipediaStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText(/📚 Test Story Title/)).toBeInTheDocument();
    });

    it('shows comment icon for stories without URL', () => {
      const askStory = { ...mockStory, url: undefined };
      render(
        <StoryCard
          story={askStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText(/💬 Test Story Title/)).toBeInTheDocument();
    });

    it('displays user avatar with first letter of username', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('T')).toBeInTheDocument(); // First letter of 'testuser'
    });

    it('displays domain name as source link', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      const sourceLink = screen.getByRole('link', { name: 'example.com' });
      expect(sourceLink).toHaveAttribute('href', 'https://example.com/test-article');
      expect(sourceLink).toHaveAttribute('target', '_blank');
    });

    it('handles missing score gracefully', () => {
      const storyWithoutScore = { ...mockStory, score: undefined };
      render(
        <StoryCard
          story={storyWithoutScore}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.queryByText(/points/)).not.toBeInTheDocument();
    });

    it('handles missing comments gracefully', () => {
      const storyWithoutComments = { ...mockStory, descendants: undefined };
      render(
        <StoryCard
          story={storyWithoutComments}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.queryByRole('button', { name: /comments/ })).not.toBeInTheDocument();
    });

    it('renders story text content when available', () => {
      const storyWithText = { ...mockStory, text: '<p>This is the story content</p>' };
      render(
        <StoryCard
          story={storyWithText}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('This is the story content')).toBeInTheDocument();
    });

    it('does not show View Article link for stories without URL', () => {
      const storyWithoutUrl = { ...mockStory, url: undefined };
      render(
        <StoryCard
          story={storyWithoutUrl}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.queryByRole('link', { name: 'View Article' })).not.toBeInTheDocument();
    });

    it('always shows View on HN link with correct URL', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      const hnLink = screen.getByRole('link', { name: 'View on HN' });
      expect(hnLink).toHaveAttribute('href', 'https://news.ycombinator.com/item?id=123');
      expect(hnLink).toHaveAttribute('target', '_blank');
    });

    it('renders expanded comments in full view', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={123}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByTestId('comments-component')).toBeInTheDocument();
      expect(screen.getByText('Comments for story 123')).toBeInTheDocument();
    });
  });

  describe('Summary Handling', () => {
    it('shows loading summary state', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          loadingSummary={true}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('Loading summary...')).toBeInTheDocument();
    });

    it('shows actual summary when provided', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          summary="This is a comprehensive article about testing"
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('This is a comprehensive article about testing')).toBeInTheDocument();
    });

    it('shows summary failed state', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          summaryFailed={true}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('Summary unavailable')).toBeInTheDocument();
    });

    it('prioritizes story text over summary', () => {
      const storyWithText = { ...mockStory, text: 'Original story text' };
      render(
        <StoryCard
          story={storyWithText}
          viewMode="full"
          expandedStory={null}
          summary="This summary should not show"
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      expect(screen.getByText('Original story text')).toBeInTheDocument();
      expect(screen.queryByText('This summary should not show')).not.toBeInTheDocument();
    });
  });

  describe('Interaction Handling', () => {
    it('calls onToggleComments when comments button is clicked', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      const commentsButton = screen.getByRole('button', { name: '25 comments' });
      fireEvent.click(commentsButton);

      expect(mockOnToggleComments).toHaveBeenCalledWith(123);
    });

    it('opens external links in new tab with security attributes', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      const articleLink = screen.getByRole('link', { name: 'View Article' });
      expect(articleLink).toHaveAttribute('target', '_blank');
      expect(articleLink).toHaveAttribute('rel', 'noopener noreferrer');

      const hnLink = screen.getByRole('link', { name: 'View on HN' });
      expect(hnLink).toHaveAttribute('target', '_blank');
      expect(hnLink).toHaveAttribute('rel', 'noopener noreferrer');
    });

    it('opens user profile link in new tab', () => {
      render(
        <StoryCard
          story={mockStory}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      const userLink = screen.getByRole('link', { name: 'testuser' });
      expect(userLink).toHaveAttribute('href', 'https://news.ycombinator.com/user?id=testuser');
      expect(userLink).toHaveAttribute('target', '_blank');
      expect(userLink).toHaveAttribute('rel', 'noopener noreferrer');
    });
  });

  describe('Memoization', () => {
    it('does not re-render when memoization props are the same', () => {
      const renderSpy = vi.fn();
      
      const TestWrapper = ({ children }: { children: React.ReactNode }) => {
        renderSpy();
        return <>{children}</>;
      };

      const { rerender } = render(
        <TestWrapper>
          <StoryCard
            story={mockStory}
            viewMode="full"
            expandedStory={null}
            onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
          />
        </TestWrapper>
      );

      // Clear spy after initial render
      renderSpy.mockClear();

      // Re-render with identical props
      rerender(
        <TestWrapper>
          <StoryCard
            story={mockStory}
            viewMode="full"
            expandedStory={null}
            onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
          />
        </TestWrapper>
      );

      // Component should have memoized and not re-rendered
      expect(renderSpy).toHaveBeenCalledTimes(1);
    });
  });

  describe('Error Handling', () => {
    it('handles malformed URLs gracefully', () => {
      const storyWithBadUrl = { ...mockStory, url: 'not-a-valid-url' };
      
      // Should not throw an error
      expect(() => {
        render(
          <StoryCard
            story={storyWithBadUrl}
            viewMode="full"
            expandedStory={null}
            onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
          />
        );
      }).not.toThrow();
    });

    it('handles missing user gracefully', () => {
      const storyWithoutUser = { ...mockStory, by: undefined };
      render(
        <StoryCard
          story={storyWithoutUser}
          viewMode="full"
          expandedStory={null}
          onToggleComments={mockOnToggleComments}
            onHideArticle={mockOnHideArticle}
        />
      );

      // Should show default avatar
      expect(screen.getByText('A')).toBeInTheDocument();
    });
  });
});